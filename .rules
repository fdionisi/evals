# Project Overview

This is an AI model evaluation framework built in Rust 2024 edition using async streams and pluggable providers.

# Development Commands

## Build and Run
- `cargo build` - Build the project
- `cargo run` - Build and run the project
- `cargo check` - Quick check for compilation errors
- `cargo clippy` - Run linting
- `cargo fmt` - Format code

## Testing
- `cargo test` - Run all tests
- `cargo test <test_name>` - Run specific test

# Architecture Guidelines

## Design Patterns
- Use async/await with tokio streams for concurrent operations
- Implement provider abstraction through traits
- Prefer strongly-typed structs over generic collections
- Prefer strongly-typed structs over type alias
- Use enums for structured data variants
- Serialize reports in consistent object format regardless of input format

## Error Handling
- Use `anyhow::Result` for fallible operations
- Provide meaningful error context

## Data Serialization
- All core data structures should derive `Serialize/Deserialize`
- Use `#[serde(untagged)]` for flexible input formats
- Use `#[serde(tag = "type")]` for structured output formats
- Convert flexible input to structured format in reports

## Async Patterns
- Use `Arc<T>` for shared state across async tasks
- Prefer `FuturesUnordered` for concurrent execution
- Stream-based processing for large datasets

# Rust Project Structure

- Follow `<module_name>.rs` and `<module_name>/<submodule>.rs` pattern
- Avoid `<module_name>/mod.rs` structure
- Keep main orchestration logic in `main.rs`
- Separate concerns into dedicated modules (ui, providers, etc.)

# Key Dependencies
- `tokio` - Async runtime
- `clap` - CLI with derive macros
- `serde/serde_json` - Serialization
- `anyhow` - Error handling
- `async-trait` - Async trait abstractions
